[{"/home/guplu/dev-js/crownstackreacttest/src/App.js":"1","/home/guplu/dev-js/crownstackreacttest/src/containers/currencyConverter.js":"2","/home/guplu/dev-js/crownstackreacttest/src/library/helpers/utility.js":"3","/home/guplu/dev-js/crownstackreacttest/src/config.js":"4"},{"size":236,"mtime":1610716864453,"results":"5","hashOfConfig":"6"},{"size":2843,"mtime":1610721028799,"results":"7","hashOfConfig":"6"},{"size":515,"mtime":1610719888644,"results":"8","hashOfConfig":"6"},{"size":95,"mtime":1610716219426,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1hsoa8n",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/guplu/dev-js/crownstackreacttest/src/App.js",["21"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CurrencyConverter from \"./containers/currencyConverter\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CurrencyConverter />\n    </div>\n  );\n}\n\nexport default App;\n",["22","23"],"/home/guplu/dev-js/crownstackreacttest/src/containers/currencyConverter.js",["24","25"],"import React, { Component } from \"react\";\nimport { getApi } from \"../library/helpers/utility\";\nimport { currencyList } from \"../config\";\nclass CurrencyConverter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currenctCurrency: \"\",\n      currencyData: [],\n    };\n  }\n\n  async componentDidMount() {\n    var result = await getApi(currencyList);\n    // console.log(\"result\", result);\n    if (result) {\n      var currencyData = result.result;\n      if (currencyData && currencyData.length > 0) {\n        this.setState({ currencyData: currencyData });\n      }\n    }\n  }\n  async handleDropDownChange(name, e) {\n    var element = e.target.value;\n    this.setState({ [name]: element });\n    let restCurrencies = [];\n    this.state.currencyData.filter(function (values) {\n      if (values.currency_code !== element) restCurrencies.push(values.currency_code);\n    });\n\n    let exchangeRates = await getApi(\"https://api.exchangeratesapi.io/latest?base=\" + element + \"&symbols=\" + restCurrencies.join(\",\"));\n    console.log(\"exchangeRates\", exchangeRates);\n    if (element !== \"\") {\n      this.setState({ exchangeRates: exchangeRates });\n    } else {\n      this.setState({ exchangeRates: null });\n    }\n  }\n  getRates() {\n    var exchangeRates = this.state.exchangeRates;\n    var finalData = [];\n\n    if (exchangeRates) {\n      finalData.push(\n        <div style={{ marginTop: \"10px\" }} key=\"exchange_rates\">\n          Exchange Rates: <span>date: {exchangeRates.date}</span>\n        </div>\n      );\n      for (const [key, value] of Object.entries(exchangeRates.rates)) {\n        var currencyName = this.state.currencyData.filter((data) => {\n          return data.currency_code == key;\n        });\n        finalData.push(\n          <div key={key}>\n            <p>{currencyName[0].currency_name + \" (\" + key + \")\"}</p>\n            <p>{value}</p>\n          </div>\n        );\n      }\n    }\n    return finalData;\n  }\n  render() {\n    var CurrencyArr = [];\n    CurrencyArr.push(\n      <option value={\"\"} key=\"select\">\n        Select\n      </option>\n    );\n    if (this.state.currencyData) {\n      var val = this.state.currencyData;\n      for (var i = 0; i < val.length; i++) {\n        var loopData = val[i];\n        CurrencyArr.push(\n          <option value={loopData.currency_code} key={loopData.currency_code}>\n            {loopData.currency_name + \" (\" + loopData.currency_code + \")\"}\n          </option>\n        );\n      }\n    }\n    return (\n      <React.Fragment>\n        <h1>Currency Converter</h1>\n        <form>\n          <label>Currency : </label>\n          <select placeholder=\"select\" onChange={this.handleDropDownChange.bind(this, \"currenctCurrency\")}>\n            {CurrencyArr}\n          </select>\n        </form>\n        {this.getRates()}\n      </React.Fragment>\n    );\n  }\n}\nexport default CurrencyConverter;\n","/home/guplu/dev-js/crownstackreacttest/src/library/helpers/utility.js",[],"/home/guplu/dev-js/crownstackreacttest/src/config.js",[],{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":27,"column":36,"nodeType":"36","messageId":"37","endLine":27,"endColumn":45},{"ruleId":"38","severity":1,"message":"39","line":51,"column":37,"nodeType":"40","messageId":"41","endLine":51,"endColumn":39},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"array-callback-return","Array.prototype.filter() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]